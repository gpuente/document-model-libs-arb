scalar DateTime

type ArbLtipGranteeState {
	id: ID!
	granteeName: String
	grantSize: Float
	matchingGrantSize: Float
	grantSummary: String
	fundingAddress: String
	fundingType: [FundingType]
	disbursementContractAddress: String
	metricsDashboardLink: String
	actuals: [GranteeActuals]
	planned: [GranteePlanned]
	stats: [GranteeStats]
}

enum FundingType {
	EOA
	Multisig
	TwoofThreeMultisig
	ThreeofFiveMultisig
}


type GranteeActuals {
	startDate: DateTime!
	endDate: DateTime!
	arbReceived: Float
	arbUtilized: Float
	arbRemaining: Float
	contractsIncentivized: [Contract]
	summary: String
	disclosures: String
}

type GranteePlanned {
	startDate: DateTime!
	endDate: DateTime!
	arbToBeDistributed: Float
	contractsIncentivized: [Contract]
	distributionMechanism: [DistributionMechanism]
	summary: String
	summaryOfChanges: String
}

type GranteeStats {
	startDate: DateTime!
	endDate: DateTime!
	avgDailyTVL: Float
	avgDailyTXNS: Float
	avgDailyVolume: Float
	uniqueAddressesCount: Float
	transactionFees: Float
}

type Contract {
	contractId: ID!
	contractLabel: String
	contractAddress: String
}

enum DistributionMechanism {
	LPIncentives
	Airdrop
}




# General

input SetGranteeInput {
    id: ID!
}


input SetGranteeNameInput {
	granteeName: String!
}


input SetGranteeGrantSizeInput {
	grantSize: Float!
	matchingGrantSize: Float!
}


input SetGranteeSummaryInput {
	grantSummary: String!
	fundingAddress: String!
	fundingType: [FundingType!]!
	disbursementContractAddress: String!
}

enum FundingType {
	EOA
	Multisig
	TwoofThreeMultisig
	ThreeofFiveMultisig
}


input SetGranteeMetricsInput {
	metricsDashboardLink: String!
}


# Metrics

input AddActualsInput {
	startDate: DateTime!
	endDate: DateTime!
	arbReceived: Float
	arbUtilized: Float
	arbRemaining: Float
	contractsIncentivized: [Contract]
	summary: String
	disclosures: String
}

scalar DateTime

type Contract {
	contractId: ID!
	contractLabel: String
	contractAddress: String
}


input AddPlannedInput {
	startDate: DateTime!
	endDate: DateTime!
	arbToBeDistributed: Float
	contractsIncentivized: [Contract]
	distributionMechanism: [DistributionMechanism!]!
	summary: String
	summaryOfChanges: String
}

scalar DateTime

type Contract {
	contractId: ID!
	contractLabel: String
	contractAddress: String
}


enum DistributionMechanism {
	LPIncentives
	Airdrop
}


input AddStatsInput {
	startDate: DateTime!
	endDate: DateTime!
	avgDailyTVL: Float
	avgDailyTXNS: Float
	avgDailyVolume: Float
	uniqueAddressesCount: Float
	transactionFees: Float
}

scalar DateTime

